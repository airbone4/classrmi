[["data-type.html", "Chapter 2 data type 2.1 基本操作 2.2 運算 2.3 介紹 2.4 實數的比較 2.5 字串 2.6 型態操作is family 2.7 vector 2.8 字串和vector 2.9 assignment 2.10 List 2.11 data set build in 2.12 primer to access element 2.13 vector 函數範例 2.14 練習: 刪除向量中的一個元素 2.15 matrix 2.16 字串函數 2.17 Factors 2.18 Data Frames 2.19 Tables 2.20 OOP 2.21 operator %&gt;% 2.22 apply family 2.23 相關操作 2.24 常見錯誤", " Chapter 2 data type 2.1 基本操作 2.1.1 指派 雖然也可以用=但是，R的設計是使用&lt;-。 a &lt;- 3 a&lt;-3是一個指派的敘述句,不會回饋資訊到螢幕上。如果要知道a的內容是甚麼,就打入a 或者(a&lt;-3) a [1] 3 (a&lt;-3) [1] 3 b &lt;- sqrt(a * a + 5) b [1] 3.74 在session中的如果要列出已經定義過的變數,可以利用ls ls() [1] \"a\" \"b\" 按照R的說明,等號只能用在top level,或是函數參數的指定。 參考 ‹function_name›(‹argname› = ‹value›, …) ‹function_name›(‹args›, ‹argname› = ‹value›, …) 2.2 運算 2.2.1 四則運算 2.2.2 Logical Another important data type is the logical type. There are two predefined variables, TRUE and FALSE: a = TRUE typeof(a) [1] \"logical\" b = FALSE typeof(b) [1] \"logical\" 2.2.3 R語言常用邏輯運算子 operator 說明 &lt; less than &gt; great than &lt;= less than or equal &gt;= greater than or equal == equal to != not equal to | entry wise or || or ! not &amp; entry wise and &amp;&amp; and xor(a,b) exclusive or 範例：不同的運算子，在個別元素和整個向量的運算結果不一樣： a = c(TRUE, FALSE) b = c(FALSE, FALSE) a | b [1] TRUE FALSE a || b [1] TRUE xor(a, b) [1] TRUE FALSE a||b 只比對a,b中的第一個元素。因此只有個長度。 &amp; 和 | 比對元素,傳回長度為大小最長的那個。 0為FALSE,而其他數字為TRUE。 x &lt;- c(TRUE,FALSE,0,6) y &lt;- c(FALSE,TRUE,FALSE,TRUE) !x x&amp;y x&amp;&amp;y x|y x||y &lt;-, &lt;&lt;-, = Leftwards assignment -&gt;, -&gt;&gt; Rightwards assignment The operators &lt;- and = can be used, almost interchangeably, to assign to variable in the same environment. The &lt;&lt;- operator is used for assigning to variables in the parent environments (more like global assignments). The rightward assignments, although available are rarely used. 2.2.4 邏輯函數 is.family 函數，可以用來判定變數是什麼型態，傳回真假值，例如 a = c(1, 2, 3) is.numeric(a) [1] TRUE is.factor(a) [1] FALSE 函數identical(a,b) a,b 是否相等 A &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;) B &lt;- A C &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;C&quot;, &quot;E&quot;) identical(A,C) [1] FALSE identical 允許只比較有效位數。 函數which()哪些元素不一致 which(A != C) [1] 2 4 函數all() all(A==B) [1] TRUE all(A==C) [1] FALSE which(),all()裡面的參數其實都是邏輯向量。 註解：但是R語言的向量運算，涉及自動填充循環，因此注意下面的計算結果 D &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;) E &lt;- c(&quot;A&quot;,&quot;B&quot;) all(D==E) [1] TRUE all(length(D)==length(E)) &amp;&amp; all(D==E) [1] FALSE 練習： 將上面可能造成誤判的情況，寫成函數先判斷是否長度相等，然後判斷元素相等，可以和identical()比較。 2.2.5 資源 資料結構 2.3 介紹 在R語言中,型態不須經過宣告(declared)。 一個變數的型態經由assignment的過程決定,即&lt;-右邊的R-Objects。也就是在指派變數值的時候,同時決定了型態。基本的 R-object有  Vectors Lists Matrices Arrays Factors Data Frames 最簡單的是vector物件,atomic vector 有6種data types(有時也叫做 6 個classes) Data Type Example Logical TRUE, FALSE Numeric 1.3, 5, 99 Integer 3L, 24L, 0L Complex 5 + 4i Character ‘b’ , “good”, “TRUE”, ‘23.4’ Raw “Hello” is stored as 48 65 6c 6c 6f 數字(3種),邏輯,字元(2種) v &lt;- TRUE print(class(v)) [1] \"logical\" v &lt;- 23.5 print(class(v)) [1] \"numeric\" v &lt;- 2L print(class(v)) [1] \"integer\" v &lt;- 2+5i print(class(v)) [1] \"complex\" v &lt;- &quot;TRUE&quot; print(class(v)) [1] \"character\" v &lt;- charToRaw(&quot;Hello&quot;) print(class(v)) [1] \"raw\" 2.4 實數的比較 x &lt;- seq(0, 1, by = 0.2) y &lt;- seq(0, 1, by = 0.2) y[4] [1] 0.6 x[3] [1] 0.4 1 - x[3] [1] 0.6 y[4] == 1 - x[3] [1] FALSE y[4] &gt; 1 - x[3] [1] TRUE ## note: all.equal(y[4], 1 - x[3]) [1] TRUE ## Q: what is the result of : 1-0.4 ==0.6 0.1+0.2 == 0.3 [1] FALSE all.equal(0.1+0.2,0.3) [1] TRUE nx1&lt;-numeric(0) nx2&lt;-3 is.null(nx1) # F,因為nx1是空向量(長度為0的數字向量) [1] FALSE is.na(nx1) # logical(0),每個元素檢查是不是NA,但是現在是空向量,所以結果是logical(0) logical(0) typeof(nx1) # double [1] \"double\" typeof(nx2) # double [1] \"double\" length(nx1) # 0 [1] 0 length(nx2) # 1 [1] 1 甚麼時候用到is.null config &lt;- list() is.null(config$name) [1] TRUE 2.5 字串 參考 2.5.1 建立字串 可以是 雙引號中\"\" 或 單引號中’’。 字串中如果有雙引號,或單引號，則如下表示: “‘這個’來自’那個’” a &lt;- &quot;hello&quot; a [1] \"hello\" typeof(a) #[1] &quot;character&quot; [1] \"character\" is.vector(a) #[1] TRUE [1] TRUE 利用函數:character() 這個函數的參數,為整數,建立一個vector(不是list),裡面的元素都是空字串 # 變數ex初始化為character vector,參看後面的討論 (ex &lt;- character(0)) character(0) length(ex) [1] 0 class(ex) [1] \"character\" # 如果剛剛沒有設定ex &lt;- character(0),這裡會發生錯誤 (ex[1] &lt;- &quot;first&quot;) [1] \"first\" # check its length again length(ex) [1] 1 索引可以用跳的: (ex[4] &lt;- &quot;fourth&quot;) [1] \"fourth\" length(ex) [1] 4 typeof(ex) [1] \"character\" ex [1] \"first\" NA NA \"fourth\" 跳過的索引,內容自動為NA. 2.5.2 空字串 引號內連空白都沒有的字串: (比較上面利用character(5)可以建立5個元素為空字串的vector。) # empty string empty_str &lt;- &quot;&quot; empty_str [1] \"\" # class class(empty_str) [1] \"character\" 2.5.2.1 討論character(0) 前面說character(2),可以傳回長度2,每個元素都是空白字串\"\"的向量,那麼character(0)是甚麼? 除了前面提到的變數初始化為向量(也許可以說是向量宣告) 例如,整數也是這樣 zz&lt;-integer(0) zz[4]=6 zz [1] NA NA NA 6 這裡對character(0)做一些測試: ex1&lt;-character(0) ex2&lt;-&quot;&quot; typeof(ex1) [1] \"character\" typeof(ex2) [1] \"character\" 函數str()用來顯示R物件的結構: str(ex1) chr(0) str(ex2) chr \"\" class(ex1) [1] \"character\" class(ex2) [1] \"character\" is.list(ex1) [1] FALSE is.list(ex2) [1] FALSE surprise: 一個字元也是向量。 is.vector(ex1) [1] TRUE is.vector(ex2) [1] TRUE length(ex1) [1] 0 length(ex2) [1] 1 is.null(ex1) [1] FALSE is.null(ex2) [1] FALSE is.na(ex1) logical(0) is.na(ex2) [1] FALSE 最後,這兩個是不是相等 ex1==ex2 logical(0) 2.6 型態操作is family is.numeric(), is.integer(), and is.double() ## 型態轉換 as family a&lt;-c(TRUE,FALSE) as.numeric(a) [1] 1 0 an&lt;-as.logical(a) an [1] TRUE FALSE 2.7 vector 利用c函數，可以使用vector存放一個以上的數字。 a = c(1, 2, 3, 4, 5) a1 = 1:5 有關list的運算:加減乘除等等 a = c(1, 2, 3, 4, 5) a+1 [1] 2 3 4 5 6 mean(a) [1] 3 var(a) [1] 2.5 summary(a) Min. 1st Qu. Median Mean 3rd Qu. Max. 1 2 3 3 4 5 note: 對比stata sum a 指令,summary(a) 返回的是一個table物件。可以指派給變數,因此計算結果可以經由變數(類別為table)存取。 list的元素,利用中括號 a = 2:6 a[1] [1] 2 a[2] [1] 3 a[0] integer(0) a[6] [1] NA 在R中,的最小的索引值為1base.如果給索引為0,可以知道資料是否被排序。 超出索引範圍得到\"NA。 a=2:6 x = a[6] 如何判斷是否NA x == NA [1] NA 上面的比較沒有意義,和NA的任何運算都是NA r = x == NA r [1] NA 結論:任何變數和NA運算,結果還是NA 另一種方法 print(x == NA) [1] NA 如何判斷NA ? is.na() is.na(a[6]) [1] TRUE 初始化向量,可以利用a&lt;-10 或指定numeric(double)型態 a &lt;- numeric(10) a [1] 0 0 0 0 0 0 0 0 0 0 如果想要知到變數的資料型別,利用函數typeof() typeof()函數回傳的結果是“字串” typeof(a) # 結果是&quot;double&quot; [1] \"double\" s = typeof(a) s [1] \"double\" typeof(s) #結果是 &quot;character&quot; [1] \"character\" 2.7.1 練習範例 Q1. a,a1,a2 屬於甚麼型態 a = 1:4 a1 = c(1, 2, 3, 4) a2 = numeric(4) A1 Q2:a3的長度是甚麼?2,或6 a1&lt;-c(1,2,3) a2&lt;-c(2,3,4) a3&lt;-c(a1,a2) HINT: a1 a2 a3;length(a3) 2.8 字串和vector 在EXCEL中，vector 一般指的是只放元素為數字的陣列(array);而陣列是可以存數字和文字的區域。table是有欄位的陣列。 但是在R語言中,vector 只是元素型態相同即可。 a &lt;- &quot;hello&quot; a [1] \"hello\" typeof(a) [1] \"character\" b &lt;- c(&quot;hello&quot;, &quot;there&quot;) b [1] \"hello\" \"there\" b[1] [1] \"hello\" typeof(b) [1] \"character\" (a = character(5)) # 產生5個空字串 [1] \"\" \"\" \"\" \"\" \"\" (b = letters[1:4]) # 注意,letters不是函數 [1] \"a\" \"b\" \"c\" \"d\" letters [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" typeof(letters) [1] \"character\" class(letters) [1] \"character\" 因為c函數的運算結果為vector,因此下例中,其元素都是字串 (a&lt;-c(&quot;d&quot;,4,TRUE)) [1] \"d\" \"4\" \"TRUE\" 問題: 怎樣知道r是空集合? y &lt;- letters[1:3] z &lt;- letters[4:6] r&lt;-intersect(y,z) r character(0) is.na(r) logical(0) length(r) [1] 0 另外,當vector有多個字串,而使用索引0的時候,也會出現 character(0),例如: string &lt;- c(&#39;sun&#39;, &#39;sky&#39;, &#39;clouds&#39;) string[0] character(0) 2.8.1 vector 相關的運算 連續數字可以利用操作元:,例如: x &lt;- 1:7; x y &lt;- 2:-2; y 比較複雜的序列可以利用函數 seq() ,例如 seq(1, 3, by=0.2) # specify step size [1] 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0 seq(1, 5, length.out=4) # specify length of the vector [1] 1.00 2.33 3.67 5.00 2.8.2 如何存取vector中的元素 元素索引可以利用 logical, integer or character vector. 如果利用整數索引,則從1開始.但是,如果索引值給的是負數(例如-2),則除了2號元素以外,都會被傳回。但是不能同時有正負。同時,浮點數會被truncated。 &gt; x [1] 0 2 4 6 8 10 &gt; x[3] # access 3rd element [1] 4 &gt; x[c(2, 4)] # access 2nd and 4th element [1] 2 6 &gt; x[-1] # access all but 1st element [1] 2 4 6 8 10 &gt; x[c(2, -4)] # 不能混合正負 Error in x[c(2, -4)] : only 0&#39;s may be mixed with negative subscripts &gt; x[c(2.4, 3.54)] # real numbers are truncated to integers [1] 2 4 2.8.3 邏輯做為索引 說是索引有點誤導,可以認為是元素篩選。例如 &gt; x[c(TRUE, FALSE, FALSE, TRUE)] [1] -3 3 &gt; x[x &lt; 0] # filtering vectors based on conditions [1] -3 -1 &gt; x[x &gt; 0] [1] 3 In the above example, the expression x&gt;0 will yield a logical vector (FALSE, FALSE, FALSE, TRUE) which is then used for indexing. 2.8.4 利用字串( character vector) 作為索引 每個元素可以有名稱: &gt; x &lt;- c(&quot;first&quot;=3, &quot;second&quot;=0, &quot;third&quot;=9) &gt; x first second third 3 0 9 &gt; class(x) # 注意:不是list [1] &quot;numeric&quot; &gt; names(x) [1] &quot;first&quot; &quot;second&quot; &quot;third&quot; &gt; x[&quot;second&quot;] second 0 &gt; x[c(&quot;first&quot;, &quot;third&quot;)] first third 3 9 a&lt;-c(x=1:2,y=3:4) a[&quot;x1&quot;] # 不是a[x1] x1 1 ? a[“x1”]哪裡來的x1? hint names(a) [] 和[[]]的差別: 原來的type是甚麼(例如,list 或vector),[]只是返回子集合(仍然是list或vector),但是[[]]則是返回內容. &gt; x &lt;- c(a = 1, b = 2, c = 3) &gt; x[&quot;a&quot;] a 1 &gt; x[[&quot;a&quot;]] [1] 1 &gt; x[1] a 1 &gt; x[[1]] [1] 1 和list的區別是 1. $ 1. 不必有\"\" a1&lt;-list(x=1:2,y=3:4) a1$x [1] 1 2 2.8.5 How to modify a vector in R? We can modify a vector using the assignment operator. We can use the techniques discussed above to access specific elements and modify them. If we want to truncate the elements, we can use reassignments. &gt; x [1] -3 -2 -1 0 1 2 &gt; x[2] &lt;- 0; x # modify 2nd element [1] -3 0 -1 0 1 2 &gt; x[x&lt;0] &lt;- 5; x # modify elements less than 0 [1] 5 0 5 0 1 2 &gt; x &lt;- x[1:4]; x # truncate x to first 4 elements [1] 5 0 5 0 2.8.6 How to delete a Vector? We can delete a vector by simply assigning a NULL to it. &gt; x [1] -3 -2 -1 0 1 2 &gt; x &lt;- NULL &gt; x NULL &gt; x[4] NULL 2.9 assignment hw1 2.10 List 2.10.1 建立 List 2.10.2 Naming List Elements 2.10.3 存取 List 元素 2.10.4 Manipulating List Elements 2.10.5 Merging Lists 2.10.6 List 轉 Vector 2.10.7 比較vector, list中,字串的問題 2.11 data set build in 2.11.1 List of pre-loaded data 2.12 primer to access element 2.13 vector 函數範例 2.13.1 cbind,rbind 2.13.2 函數diff 2.14 練習: 刪除向量中的一個元素 2.14.1 Adding Attributes to Vectors 2.15 matrix 2.15.1 Transpose 2.15.2 合併矩陣 2.16 字串函數 2.16.0.1 asic character string functions provided by R: 2.16.1 應用範例macro 2.16.2 paste 2.16.3 misc 2.17 Factors 2.17.1 探索一下factors 2.17.2 探索一下factor 2.17.3 factor 和函數read.csv() 2.17.4 factor 和函數summary() 2.18 Data Frames 2.18.1 簡單介紹一下手動建立data.frame 2.18.2 data frame 的常用函數： 2.19 Tables 2.19.1 One Way Tables 2.19.2 Two Way Tables 2.20 OOP 2.20.1 Base objects vs OO objects 2.20.2 變數屬性查詢函數 2.21 operator %&gt;% 2.22 apply family 2.22.1 apply 2.22.2 lapply函數 2.22.3 sapply函數 2.22.4 比較 2.22.5 vapply函數 2.22.6 mapply函數 2.22.7 tapply函數 2.22.8 rapply函數 2.22.9 eapply函數 2.22.10 範例 2.22.10.1 將每個rmd檔案中需要的函數庫列表 2.23 相關操作 2.23.1 問題:想要知道有甚麼資料庫可以用? 2.24 常見錯誤 2.24.1 error 2.24.2 error 2.24.3 error "]]
